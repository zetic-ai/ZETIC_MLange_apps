// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -cxx-interoperability-mode=default -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-experimental-feature OpaqueTypeErasure -enable-bare-slash-regex -module-name ZeticMLange
import CoreGraphics
import CoreML
import CryptoKit
import Darwin
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class ZeticMLangeFeatureUtils {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ZeticMLangeModelNativeWrapper {
  @objc deinit
}
public class ZeticMLangeFeatureFaceDetection {
  public init()
  public func preprocess(_ image: UIKit.UIImage) -> Foundation.Data
  public func postprocess(_ output: inout [Foundation.Data]) -> Swift.Array<ZeticMLange.FaceDetectionResult>
  @objc deinit
}
public class ZeticMLangeModel {
  public init?(_ modelKey: Swift.String)
  public func run(_ inputs: [Foundation.Data]) throws
  public func getOutputDataArray() -> [Foundation.Data]
  public static func createInstanceOfModelByTarget(_ modelName: Swift.String, _ targetModelPath: Foundation.URL, _ target: ZeticMLange.ZeticMLangeTarget) throws -> any ZeticMLange.ZeticMLangeTargetModel
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ZeticMLangeNativeResult {
  @objc deinit
}
public class ZeticMLangeException : Swift.Error {
  public var description: Swift.String {
    get
  }
  public init(_ message: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ZeticMLangeFeatureYolov8Wrapper {
  @objc deinit
}
public class ZeticMLangeFeatureFaceEmotionRecognition {
  public init()
  public func preprocess(_ image: UIKit.UIImage, _ roi: ZeticMLange.Box) -> Foundation.Data
  public func postprocess(_ output: inout [Foundation.Data]) -> ZeticMLange.FaceEmotionRecognitionResult
  @objc deinit
}
public class ZeticMLangeFeatureYolov8 {
  public init(_ cocoFilePath: Swift.String)
  public func preprocess(_ image: UIKit.UIImage) -> Foundation.Data
  public func postprocess(_ image: UIKit.UIImage, _ data: inout Foundation.Data) -> UIKit.UIImage
  @objc deinit
}
public enum ZeticMLangeTarget : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case ZETIC_MLANGE_TARGET_TORCH
  case ZETIC_MLANGE_TARGET_TFLITE
  case ZETIC_MLANGE_TARGET_ORT
  case ZETIC_MLANGE_TARGET_ORT_NNAPI
  case ZETIC_MLANGE_TARGET_QNN
  case ZETIC_MLANGE_TARGET_QNN_QUANT
  case ZETIC_MLANGE_TARGET_COREML
  case ZETIC_MLANGE_TARGET_COREML_FP32
  case ZETIC_MLANGE_TARGET_NEUROPILOT
  case ZETIC_MLANGE_TARGET_NEUROPILOT_QUANT
  case ZETIC_MLANGE_TARGET_EXYNOS
  case ZETIC_MLANGE_TARGET_EXYNOS_QUANT
  case ZETIC_MLANGE_TARGET_KIRIN
  case ZETIC_MLANGE_TARGET_KIRIN_QUANT
  case ZETIC_MLANGE_TARGET_GGML
  case ZETIC_MLANGE_TARGET_GGML_QUANT
  case ZETIC_MLANGE_TARGET_NUM_MODELS
  case ZETIC_MLANGE_TARGET_NUM_SLOTS
  case ZETIC_MLANGE_TARGET_FAIL
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [ZeticMLange.ZeticMLangeTarget]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [ZeticMLange.ZeticMLangeTarget] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public class ZeticMLangeFeatureFaceLandmark {
  public init()
  public func preprocess(_ image: UIKit.UIImage, _ roi: ZeticMLange.Box) -> Foundation.Data
  public func postprocess(_ output: inout [Foundation.Data]) -> ZeticMLange.FaceLandmarkResult
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ZeticMLangeFeatureFaceDetectionWrapper {
  @objc deinit
  public func preprocess(_ image: UIKit.UIImage) -> Foundation.Data
  public func postprocess(_ outputData: inout [Foundation.Data]) -> Swift.Array<ZeticMLange.FaceDetectionResult>
}
public struct FaceDetectionResult {
  public let bbox: ZeticMLange.Box
  public let confidence: Swift.Float
  public init(bbox: ZeticMLange.Box, confidence: Swift.Float)
}
public struct Box {
  public let xmin: Swift.Float
  public let ymin: Swift.Float
  public let xmax: Swift.Float
  public let ymax: Swift.Float
  public init(xmin: Swift.Float, ymin: Swift.Float, xmax: Swift.Float, ymax: Swift.Float)
}
public protocol ZeticMLangeTargetModel {
  func isInitialized() -> Swift.Bool
  func run(_ input: [Foundation.Data]) throws
  func getOutputDataArray() -> [Foundation.Data]
  func createInputDataArray() -> [Foundation.Data]
  func getInputTensorNameHashes() -> [[Swift.Int32]]
  func getOutputTensorNameHashes() -> [[Swift.Int32]]
}
@_hasMissingDesignatedInitializers public class ZeticMLangeFeatureFaceEmotionRecognitionWrapper {
  @objc deinit
  public func preprocess(_ image: UIKit.UIImage, _ roi: ZeticMLange.Box) -> Foundation.Data
  public func postprocess(_ outputData: inout [Foundation.Data]) -> ZeticMLange.FaceEmotionRecognitionResult
}
public struct FaceEmotionRecognitionResult {
  public let emotion: Swift.String
  public let confidence: Swift.Float
  public init(emotion: Swift.String, confidence: Swift.Float)
}
public class ZeticMLangeCoreMLModel : ZeticMLange.ZeticMLangeTargetModel {
  public init(_ key: Swift.String, _ targetModelPath: Foundation.URL)
  public func run(_ input: [Foundation.Data]) throws
  public func getOutputDataArray() -> [Foundation.Data]
  public func createInputDataArray() -> [Foundation.Data]
  public func isInitialized() -> Swift.Bool
  public func getInputTensorNameHashes() -> [[Swift.Int32]]
  public func getOutputTensorNameHashes() -> [[Swift.Int32]]
  @objc deinit
}
public class ZeticMLangeFeatureProvider : CoreML.MLFeatureProvider {
  @objc public var featureNames: Swift.Set<Swift.String>
  public init(featureNames: [Swift.String], input: [Foundation.Data], description: CoreML.MLModelDescription)
  @objc public func featureValue(for featureName: Swift.String) -> CoreML.MLFeatureValue?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ZeticMLangeFileUtils {
  public static func fetchTargetModel(modelKey: Swift.String, target: ZeticMLange.ZeticMLangeTarget) throws -> Foundation.URL
  public static func fetchModel(modelKey: Swift.String) throws -> Foundation.URL
  public static func fetchResponse(from url: Foundation.URL, authorization: Swift.String) throws -> [Swift.String : Any]
  public static func downloadFileSync(from url: Foundation.URL, localPath: Swift.String) throws -> Foundation.URL
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ZeticMLangeFeatureFaceLandmarkWrapper {
  @objc deinit
  public func preprocess(_ image: UIKit.UIImage, _ roi: ZeticMLange.Box) -> Foundation.Data
  public func postprocess(_ outputData: inout [Foundation.Data]) -> ZeticMLange.FaceLandmarkResult
}
public struct FaceLandmarkResult {
  public let faceLandmark: Swift.Array<ZeticMLange.FaceLandmark>
  public let confidence: Swift.Float
  public init(faceLandmark: Swift.Array<ZeticMLange.FaceLandmark>, confidence: Swift.Float)
}
public struct FaceLandmark {
  public let x: Swift.Float
  public let y: Swift.Float
  public let z: Swift.Float
}
extension ZeticMLange.ZeticMLangeTarget : Swift.Equatable {}
extension ZeticMLange.ZeticMLangeTarget : Swift.Hashable {}
extension ZeticMLange.ZeticMLangeTarget : Swift.RawRepresentable {}
